language: python
cache:
  pip: true
  directories:
    - /home/travis/.rvm/gems
# env:
#   - PR_AUTHOR=${TRAVIS_PULL_REQUEST_SLUG::-15}
git:
  depth: 2
jobs:
  allow_failures:
    env:
      - CAN_FAIL=true

  include:
    - stage: cache-and-validate
      name: "Create install cache and validate updated assemblies"
      install:
        - gem install asciidoctor asciidoctor-diagram rouge
        - pip3 install pyyaml aura.tar.gz
      script:
        # Fail if Asciidoctor encounters errors. Pass otherwise. Run only if there are modified AsciiDoc files
        - if ! [[ -z $(git diff --name-only HEAD~1 HEAD --diff-filter=d '*.adoc' ':(exclude)_unused_topics/*') ]]; then chmod +x ./scripts/check-asciidoctor-build.sh && ./scripts/check-asciidoctor-build.sh; fi

    - stage: build
      if: branch IN (main, enterprise-4.13, enterprise-4.14)
      name: "Build openshift-enterprise distro"
      script:
        - python3 build.py --distro openshift-enterprise --product "OpenShift Container Platform" --version 4.14 --no-upstream-fetch && python3 makeBuild.py

    - # stage name not required, will continue to use `build`
      if: branch IN (main, enterprise-4.13, enterprise-4.14)
      name: "Build openshift-dedicated distro"
      script:
        - python3 build.py --distro openshift-dedicated --product "OpenShift Dedicated" --version 4 --no-upstream-fetch && python3 makeBuild.py

    - # stage name not required, will continue to use `build`
      if: branch IN (main, enterprise-4.13, enterprise-4.14)
      name: "Build openshift-rosa distro"
      script:
        - python3 build.py --distro openshift-rosa --product "Red Hat OpenShift Service on AWS" --version 4 --no-upstream-fetch && python3 makeBuild.py

    - # stage name not required, will continue to use `build`
      if: branch IN (main, enterprise-4.13, enterprise-4.14)
      name: "Build microshift distro"
      script:
        - python3 build.py --distro microshift --product "Microshift" --version 4 --no-upstream-fetch && python3 makeBuild.py

    - stage: check-with-vale
      env:
        - CAN_FAIL=true
      if: type IN (pull_request) AND sender != "openshift-cherrypick-robot"
      name: "Run Vale against PR AsciiDoc files"
      language: minimal
      script:
        - gem install asciidoctor asciidoctor-diagram rouge
        - travis_retry wget https://github.com/errata-ai/vale/releases/download/v2.28.0/vale_2.28.0_Linux_64-bit.tar.gz --retry-connrefused
        - mkdir bin && tar -xvzf vale_2.28.0_Linux_64-bit.tar.gz -C bin
        - export PATH=./bin:"$PATH"
        - travis_retry vale sync # pull down VRH rules package
        - chmod +x ./scripts/check-with-vale.sh
        - ./scripts/check-with-vale.sh

    # Commenting out to disable auto-merging of PRs
    # - stage: automerge
    #   if: env(PR_AUTHOR)=openshift-cherrypick-robot
    #   script: bash ./automerge.sh

    - stage: netlify
      name: "Build and deploy with Netlify"
      env:
        - CAN_FAIL=true
      language: minimal
      if: type IN (pull_request) AND branch IN (main, enterprise-4.13, enterprise-4.14) AND sender != "openshift-cherrypick-robot"
      script:
        - chmod +x autopreview.sh
        - ./autopreview.sh

stages:
  - cache-and-validate
  - build
  - netlify
  #- check-with-vale
  #- automerge
